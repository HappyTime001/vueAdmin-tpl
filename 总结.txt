

由于我们目前使用的前端架构，是第三方基于vue脚手架改编的开源的，所以整体上问题不是很大，但还是存在几个方面的小问题

1.主要思路有点混乱，就是有些功能代码没有写在实际应该存在的地方，比如重定向直接写在了路由配置里，这个其实在全局性的
main.js中使用全局导航钩子，进行重定向会好很多。（permission.js）

2.缺少点安全性意识，比如有些导航通过urlInfo.taxType进行重定向，而urlInfo是window.location.search的值，也就是url问号
？后面的参数，这一堆参数在浏览器端对任何用户都是可见、可修改的，比如我把taxType随便改个值，路由重定向功能立即失效。
类似这种隐私性数据，建议存本地存储 或者vuex。

3.一些全局性的数据或功能函数未抽取出来，代码冗余严重，比如api下expense.js和fund.js等写了很多个
const indexData = JSON.parse(sessionStorage.getItem('indexData')) || store.getters.indexData
const urlInfo = JSON.parse(sessionStorage.getItem('urlInfo')) || store.getters.urlInfo
这个完全可以写个全局函数封装，所有用到的地方统一调公共函数，可避免代码差异化和冗余。
比如某天indexData或urlInfo名称改了，岂不是要去把这些代码通通改一遍！~

4.api下的initial.js请求url写法冗余，可读性太差。其实不需要我们自己拼参数，根据get或post使用params或data统一传参即可。
不需要我们使用&拼接参数，这样很容易漏掉某些参数，而且可读性太差，假如有一百个参数，那自己岂不是要写一百个&来拼接

5.图标这一块，可以优化下，建议使用字体矢量图标：
	http://element.eleme.io/#/zh-CN/component/icon
    	http://fontawesome.io/icons/

6.减少使用for(in)等性能低的语法(全局检索时发现大量的for-in语法)，还有使用for循环时，要在循环前存一下数组长度，数据量
上来时，性能提升会非常明显！

7.utils下req.js直接baseURL写死接口ip地址（而且接口要写资源共享才能访问），开发一套，生产打包又一套。
这个baseURL可不写死，请求地址直接以统一前缀开头比如/web-bovms/salary/getSalaryDeptDetailList.do，
然后在开发环境使用webpack代理即可，如果生产环境需要代理，交给nginx即可。

8.源码分支要规范化。目前前端代码管理不规范，目前大家公用一个开发分支，这样很容易造成代码冲突。建议最下层建立多开发分支，按人
头数算，上设测试分支一个，再上设置生存分支一个。（合并顺序：多开发分支->测试分支->生产分支）

9.文档原型要规范化。比如接口文档、需求文档、技术文档、需求原型等都需要放svn进行版本化管理，目前都是通过qq随意传送，这样
的话，人多文档多时就很容易混乱，而且不易于同事之间的工作对接。（接口文档也可使用在线文档生成工具）

10.建议内部多组织些技术型交叉培训，让前后端能相互了解下对方的工作模式，这样可以提高大家的沟通效率和默契度。目前大家反应
前后端沟通成本有点大！而且后端人员不太愿意修改旧接口，有些东西前后端都可以改，就看谁改起来比较容易而已

11.
